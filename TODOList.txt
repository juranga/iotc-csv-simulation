Forseeable problems if this device simulation solution is intended on becoming a full fledged problem that we support and not a temporary one:


URGENT IN CASE I LEAVE FRIDAY EVENING BEFORE FINISHING: DEVICE IDS NEED TO BE INSERTED PROGRAMATICALLY TO CENTRAL & THE AZURE TABLE NOW
----------------------------------------------------------------------------

0) Create Azure Functions for each Simulated CSV

--- Class Required instead of DeviceModels.json?
--- I should parse the DeviceModels.json for the Csv Energy Telemetry?

Questions to Consider:
Should I throttle when uploading devices just to make sure it doesn't break?

----------------------------------------------------------------------------

Investigation Required:  

-Device Authentication may not be able to be done easily.
- Investigate Device Authentication in Central. Would creating a device authenticate it too?

DEVICE 

----------------------------------------------------------------------------


1) Error checking Required:

1.1) Resource Location compatibility issues need to be addressed.

1.2) Error checking required for ARM Template Files adhering to format we expect

How it is right now:
The ARM deployment was built to adhere to numeric id sorting, and thus the deployments fail if id is not provided.
Additionally, it STRONGLY depends on the default.params.json file to be working and written properly. If it is not, things will fail.
The main issue is with checking whether a resource exists or not. It is much easier to create resource than to check if the resource exists.
As such, going forward, it would make sense to refactor and implement a more efficient resource checking via code.

1.3) Error checking Default Params file

1.4) Error checking for Azure Table Ids

1.5) IMPORTANT: Error checking to see if DeviceModels already exist in application. 
[If they do not, create them? Warn user? How do I address this?]

1.6) Error Checking for API Calls succeeding?

----------------------------------------------------------------------------
 
Cool Refactoring work:
Finding out how to programatically check if resource exists based solely off name and not user saying it exists & have it work correctly with Template Deployment dependencies.
(Not an easy problem, might require architectural change to ARM deployment process right now.. So that entire ARM class would have to be refactored.)


----------------------------------------------------------------------------
 
2) Authentication Currently Caches the id of user who last runs script locally
- This might be a security issue if user's PC is not fully secure?
- The current implementation for Authentication api says: 
**If the user is already logged in to azure CLI or have logged-in before, the constructor will load the existing credentials without prompt.**
- Investigate how to log off azure cli might be good idea programtically.

How it is right now: 
This is currently based off Azure ML's authentication through Azure cli. 
They plan on this to be CLI independent, and therefore the code will likely change on their end. We do not know what approach they will use.
This can be fixed by forcing the current azure ml core service to the version we currently have (done already),
but this is a temporary fix and we should use caution going forward if interactive login is what we want.
The alternative is device login, which is an additional manual step from users similar to santorini CLI.

----------------------------------------------------------------------------
 
3) If Azure Function or Storage Accounts fail at all for X amount of time, should replay data act differently?
How much customization should we do for this particular replay feature? 
- What about when timestamp data is involved?

----------------------------------------------------------------------------
 
4) Updating configuration files after deployment:

* Config.json needs to be updated if resource group is ever deleted or re-deployment is necessary for resources. 
If Config gets updated but Azure Resources are not fully deployed, this is also a problem as it will skip resource deployment.

* Default.Params.json needs to be updated after resources have been created to state that they now exist.

* User needs to be notified that if they delete the resource group or any particular resource, then the default params must be updated.
(This would potentially get fixed with a rearchitecturing of how resource provisioning is currently implemented. This would get fixed with the Refactoring work stated above)

----------------------------------------------------------------------------
 
5) Look in to JSON objects for Device Models (Re think simulation of devices, but also care only about CSVs)

----------------------------------------------------------------------------

6) 

UPDATE COMMENTS TO ADHERE TO THIS FORMAT: This is done for Code Editors to easily understand what the function requires & does.

"""Lists the access keys for the specified storage account.

        :param resource_group_name: The name of the resource group within the
         user's subscription. The name is case insensitive.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the
         specified resource group. Storage account names must be between 3 and
         24 characters in length and use numbers and lower-case letters only.
        :type account_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: StorageAccountKeys or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.storage.v2015_06_15.models.StorageAccountKeys or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """