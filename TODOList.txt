Forseeable problems if this device simulation solution is intended on becoming a full fledged problem that we support and not a temporary one:

0)
UPDATE README


0.5) 2 choices here: 

1. Either have the user ALREADY have an Application in Central that you can then direct them to get the master key and pass it as a param when running the deployment or
2. Add individual connection strings to Keyvault 

----------------------------------------------------------------------------

TODO: MasterKey obtained via going to IoT Central App... Otherwise you have to api call IoT Central for sas key every time. 

1) Error checking Required:

1.1) Resource Location compatibility issues need to be addressed.

1.2) Error checking required for ARM Template Files adhering to format we expect

How it is right now:
The ARM deployment was built to adhere to numeric id sorting, and thus the deployments fail if id is not provided.
Additionally, it STRONGLY depends on the default.params.json file to be working and written properly. If it is not, things will fail.
The main issue is with checking whether a resource exists or not. It is much easier to create resource than to check if the resource exists.
As such, going forward, it would make sense to refactor and implement a more efficient resource checking via code.

1.3) Error checking Default Params file

1.4) Error checking for Azure Table Ids

1.6) Error Checking for API Calls succeeding?

----------------------------------------------------------------------------
 
Cool Refactoring work:
Finding out how to programatically check if resource exists based solely off name and not user saying it exists & have it work correctly with Template Deployment dependencies.
(Not an easy problem, might require architectural change to ARM deployment process right now.. So that entire ARM class would have to be refactored.)

----------------------------------------------------------------------------

2) Investigate Credentials Authentication with AzureML Folks to see if they can support functionality outside of azml


----------------------------------------------------------------------------
 
4) Updating configuration files after deployment:

* Config.json needs to be updated if resource group is ever deleted or re-deployment is necessary for resources. 
If Config gets updated but Azure Resources are not fully deployed, this is also a problem as it will skip resource deployment.

* Default.Params.json needs to be updated after resources have been created to state that they now exist.

* User needs to be notified that if they delete the resource group or any particular resource, then the default params must be updated.
(This would potentially get fixed with a rearchitecturing of how resource provisioning is currently implemented. This would get fixed with the Refactoring work stated above)


----------------------------------------------------------------------------

6) 

UPDATE COMMENTS TO ADHERE TO THIS FORMAT: This is done for Code Editors to easily understand what the function requires & does.

"""Lists the access keys for the specified storage account.

        :param resource_group_name: The name of the resource group within the
         user's subscription. The name is case insensitive.
        :type resource_group_name: str
        :param account_name: The name of the storage account within the
         specified resource group. Storage account names must be between 3 and
         24 characters in length and use numbers and lower-case letters only.
        :type account_name: str
        :param dict custom_headers: headers that will be added to the request
        :param bool raw: returns the direct response alongside the
         deserialized response
        :param operation_config: :ref:`Operation configuration
         overrides<msrest:optionsforoperations>`.
        :return: StorageAccountKeys or ClientRawResponse if raw=true
        :rtype: ~azure.mgmt.storage.v2015_06_15.models.StorageAccountKeys or
         ~msrest.pipeline.ClientRawResponse
        :raises: :class:`CloudError<msrestazure.azure_exceptions.CloudError>`
        """